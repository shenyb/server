<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.2.xsd">

<!--配置数据源 Master -->
	<bean id="bops_masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" 		value="${bops_master.jdbc.driverClassName}" />
		<property name="url" 					value="${bops_master.jdbc.url}" />
		<property name="username" 				value="${bops_master.jdbc.username}" />
		<property name="password" 				value="${bops_master.jdbc.password}" />
		<property name="maxActive" 				value="${bops_master.jdbc.maxActive}" />
		<property name="initialSize" 			value="${bops_master.jdbc.initialSize}" />
		<property name="maxWait" 				value="${bops_master.jdbc.maxWait}" />
		<property name="removeAbandoned" 		value="${bops_master.jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${bops_master.jdbc.removeAbandonedTimeout}" /> 
		<property name="connectionProperties" 	value="${bops_master.jdbc.connectionProperties}" />
	</bean>
	
	<!--配置数据源 Slave -->
	<bean id="bops_slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" 		value="${bops_slave.jdbc.driverClassName}" />
		<property name="url" 					value="${bops_slave.jdbc.url}" />
		<property name="username" 				value="${bops_slave.jdbc.username}" />
		<property name="password" 				value="${bops_slave.jdbc.password}" />
		<property name="maxActive" 				value="${bops_slave.jdbc.maxActive}" />
		<property name="initialSize" 			value="${bops_slave.jdbc.initialSize}" />
		<property name="minIdle" 				value="${bops_slave.jdbc.minIdle}" />
		<property name="removeAbandoned" 		value="${bops_slave.jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${bops_slave.jdbc.removeAbandonedTimeout}" /> 
		<property name="connectionProperties" 	value="${bops_slave.jdbc.connectionProperties}" />
	</bean>
	
	<!-- ######################bops数据源###################################  -->
	 <!-- 读写分离配置，支持一主多从 -->
	<bean id="bops_routingDataSource" class="com.need.task.common.datasource.RoutingDataSource">
		<property name="writeDataSource" ref="bops_masterDataSource" />
		<property name="readDataSourceMap">
			<map>
				<entry key="readDataSource1" value-ref="bops_slaveDataSource" />
				<!-- <entry key="readDataSource2" value-ref="bops_slaveDataSource"/> -->
			</map>
		</property>
	</bean>

	<!-- mybatis文件配置，扫描所有mapper文件 ,configLocation为mybatis属性mapperLocations为所有mapper -->
	<bean id="bops_sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="bops_routingDataSource"  p:configLocation="classpath:mybatis/mybatis_config.xml"    p:mapperLocations="classpath:mapper_bops/*.xml" />	
	<!-- spring与mybatis整合配置，扫描所有dao -->	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.need.task.dao.jdbc.bops" />
		<property name="sqlSessionFactoryBeanName" value="bops_sqlSessionFactory" />
	</bean>

  <!-- 配置RoutingDataSourceProcessor 很好的实现BeanPostProcessor -->
   <aop:config>
		<aop:pointcut id="bops_DAOMethod" expression="execution (* com.need.task.dao.jdbc.bops..*.*(..))" />
		<aop:pointcut id="bops_ServiceMethod" expression="execution (* com.need.task.service.*.impl.*.*(..))" />
		<!-- 指定aop嵌套顺序，order数值越小就在更外层 -->
		 <!-- 指定DAO层中方法的选择方式 -->
		<aop:advisor order="1" advice-ref="bops_txAdvice" pointcut-ref="bops_DAOMethod" />
		<aop:aspect order="-1" ref="routingDataSourceTransactionProcessor">
			<aop:around pointcut-ref="bops_DAOMethod" method="markReadOrWriteDB" />
			<aop:around pointcut-ref="bops_ServiceMethod" method="markReadOrWriteDB" />
		</aop:aspect>
	</aop:config>

    
    <bean id="bops_txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="bops_routingDataSource" />
	</bean>
	<!-- 针对多数据源的事务处理 -->
	<tx:annotation-driven transaction-manager="bops_txManager" />
	
   <!-- 利用spring的事务的read-only属性 对DAO层方法选择读写 -->
	<tx:advice id="bops_txAdvice" transaction-manager="bops_txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />


			<tx:method name="query*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="count*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="list*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="select*" read-only="true" propagation="NOT_SUPPORTED" />

			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

</beans>
