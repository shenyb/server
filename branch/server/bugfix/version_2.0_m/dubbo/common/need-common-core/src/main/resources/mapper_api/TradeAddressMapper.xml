<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.need.common.core.dao.jdbc.trade.TradeAddressDAO">
	<resultMap id="BaseResultMap" type="com.need.common.domain.po.api.trade.TradeAddressPO">
		<id column="address_id" property="addressId" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="logistics_id" property="logisticsId" jdbcType="INTEGER" />
		<result column="address" property="address" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="logistics_value" property="logisticsValue"
			jdbcType="VARCHAR" />
		<result column="is_default" property="isDefault" jdbcType="VARCHAR" />
		<result column="telephone" property="telephone" jdbcType="VARCHAR" />
		<result column="receiver" property="receiver" jdbcType="VARCHAR" />
		<result column="certification_card" property="certificationCard"
			jdbcType="VARCHAR" />
		<result column="certification_positive_key" property="certificationPositiveKey" jdbcType="VARCHAR" />
		<result column="certification_negative_key" property="certificationNegativeKey" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		address_id, user_id, logistics_id, logistics_value,
		address, create_time, receiver, is_default, telephone, certification_card,
		certification_positive_key,certification_negative_key
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from trade_address
		where address_id = #{addressId}
	</select>

	<select id="CountUserAddress" resultType="int" parameterType="java.lang.String">
		select
		count(user_id)
		from trade_address
		where user_id = #{userId}
	</select>

	<select id="queryAddressList" resultType="com.need.common.domain.vo.trade.AddressResultVO"
		parameterType="java.lang.String">
		select
		address_id, user_id, logistics_id, logistics_value, address, create_time,
		receiver, is_default, telephone, certification_card
		from trade_address
		where user_id = #{userId} ORDER BY is_default DESC, create_time DESC 
	</select>
	
	<select id="queryAddressList_V1_3" resultType="com.need.common.domain.vo.trade.AddressResultVO"
		parameterType="java.lang.String">
		select
		address_id, user_id, logistics_id, logistics_value, address, create_time,
		receiver, is_default, telephone, certification_card,
		certification_positive_key,certification_negative_key
		from trade_address
		where user_id = #{userId} ORDER BY is_default DESC, create_time DESC 
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from trade_address
		where address_id = #{addressId}
	</delete>

	<delete id="removeAddressList" parameterType="java.lang.String">
		delete from trade_address
		where address_id in ( #{addressId} )
	</delete>

	<delete id="deleteByAddressId"  parameterType="java.lang.String">
		delete from trade_address
		where address_id = #{addressId}
	</delete>

	<delete id="removeDefaultAddress" parameterType="java.lang.String">
		delete from trade_address
		where address_id = #{addressId}
	</delete>

	<insert id="insertNewAddress" parameterType="com.need.common.domain.vo.trade.AddressParamVO">
		insert into trade_address (address_id, user_id, logistics_id,
		address, create_time, logistics_value, receiver, telephone, is_default, 
		certification_card)
		values (#{addressId}, #{userId}, #{logisticsId},
		#{address}, NOW(), #{logisticsValue}, #{receiver}, #{telephone}, #{isDefault},
		#{certificationCard})
	</insert>
	
	<insert id="insertNewAddress_V1_3" parameterType="com.need.common.domain.vo.trade.AddressParamVO">
		insert into trade_address (address_id, user_id, logistics_id,
		address, create_time, logistics_value, receiver, telephone, is_default, 
		certification_card,certification_positive_key,certification_negative_key)
		values (#{addressId}, #{userId}, #{logisticsId},
		#{address}, NOW(), #{logisticsValue}, #{receiver}, #{telephone}, #{isDefault},
		#{certificationCard},#{certificationPositiveKey},#{certificationNegativeKey})
	</insert>

	<insert id="insertSelective" parameterType="com.need.common.domain.po.api.trade.TradeAddressPO">
		insert into trade_address
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="addressId != null">
				address_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="logisticsId != null">
				logistics_id,
			</if>
			<if test="address != null">
				address,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="addressId != null">
				#{addressId,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="logisticsId != null">
				#{logisticsId,jdbcType=INTEGER},
			</if>
			<if test="address != null">
				#{address,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>

	<update id="updateByAddressId" parameterType="com.need.common.domain.vo.trade.AddressParamVO">
		update trade_address
		set
		logistics_id = #{logisticsId},
		address = #{address},
		receiver = #{receiver},
		telephone = #{telephone},
		logistics_value = #{logisticsValue},
		certification_card = #{certificationCard}
		where address_id = #{addressId}
	</update>
	
	<update id="updateByAddressId_V1_3" parameterType="com.need.common.domain.vo.trade.AddressParamVO">
		update trade_address
		set
		logistics_id = #{logisticsId},
		address = #{address},
		receiver = #{receiver},
		telephone = #{telephone},
		logistics_value = #{logisticsValue},
		certification_card = #{certificationCard},
		certification_positive_key = #{certificationPositiveKey},
		certification_negative_key = #{certificationNegativeKey}
		where address_id = #{addressId}
	</update>

	<update id="updateDefaultByAddressId">
		update trade_address
		set is_default = #{isDefault}
		where address_id = #{addressId}
	</update>



	<update id="updateByPrimaryKeySelective" parameterType="com.need.common.domain.po.api.trade.TradeAddressPO">
		update trade_address
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="logisticsId != null">
				logistics_id = #{logisticsId,jdbcType=INTEGER},
			</if>
			<if test="address != null">
				address = #{address,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where address_id = #{addressId,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.need.common.domain.po.api.trade.TradeAddressPO">
		update trade_address
		set user_id = #{userId},
		logistics_id = #{logisticsId},
		address = #{address},
		create_time = #{createTime},
		certification_card = #{certificationCard}
		where address_id = #{addressId}
	</update>
</mapper>