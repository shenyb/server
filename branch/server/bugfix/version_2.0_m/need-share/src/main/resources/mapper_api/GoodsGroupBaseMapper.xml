<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.need.share.dao.jdbc.api.goodsGroup.GoodsGroupBaseDAO" >
  <resultMap id="BaseResultMap" type="com.need.share.dao.jdbc.api.goodsGroup.po.GoodsGroupBase" >
    <id column="group_batch" property="groupBatch" jdbcType="VARCHAR" />
    <result column="rule_type" property="ruleType" jdbcType="VARCHAR" />
    <result column="rule_content" property="ruleContent" jdbcType="VARCHAR" />
    <result column="group_name" property="groupName" jdbcType="VARCHAR" />
    <result column="group_brief" property="groupBrief" jdbcType="VARCHAR" />
    <result column="group_status" property="groupStatus" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    group_batch, rule_type, rule_content, group_name, group_brief, group_status, start_time, 
    end_time, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from goods_group_base
    where group_batch = #{groupBatch,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from goods_group_base
    where group_batch = #{groupBatch,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.need.share.dao.jdbc.api.goodsGroup.po.GoodsGroupBase" >
    insert into goods_group_base (group_batch, rule_type, rule_content, 
      group_name, group_brief, group_status, 
      start_time, end_time, create_time
      )
    values (#{groupBatch,jdbcType=VARCHAR}, #{ruleType,jdbcType=VARCHAR}, #{ruleContent,jdbcType=VARCHAR}, 
      #{groupName,jdbcType=VARCHAR}, #{groupBrief,jdbcType=VARCHAR}, #{groupStatus,jdbcType=VARCHAR}, 
      #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.need.share.dao.jdbc.api.goodsGroup.po.GoodsGroupBase" >
    insert into goods_group_base
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="groupBatch != null" >
        group_batch,
      </if>
      <if test="ruleType != null" >
        rule_type,
      </if>
      <if test="ruleContent != null" >
        rule_content,
      </if>
      <if test="groupName != null" >
        group_name,
      </if>
      <if test="groupBrief != null" >
        group_brief,
      </if>
      <if test="groupStatus != null" >
        group_status,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="groupBatch != null" >
        #{groupBatch,jdbcType=VARCHAR},
      </if>
      <if test="ruleType != null" >
        #{ruleType,jdbcType=VARCHAR},
      </if>
      <if test="ruleContent != null" >
        #{ruleContent,jdbcType=VARCHAR},
      </if>
      <if test="groupName != null" >
        #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="groupBrief != null" >
        #{groupBrief,jdbcType=VARCHAR},
      </if>
      <if test="groupStatus != null" >
        #{groupStatus,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.need.share.dao.jdbc.api.goodsGroup.po.GoodsGroupBase" >
    update goods_group_base
    <set >
      <if test="ruleType != null" >
        rule_type = #{ruleType,jdbcType=VARCHAR},
      </if>
      <if test="ruleContent != null" >
        rule_content = #{ruleContent,jdbcType=VARCHAR},
      </if>
      <if test="groupName != null" >
        group_name = #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="groupBrief != null" >
        group_brief = #{groupBrief,jdbcType=VARCHAR},
      </if>
      <if test="groupStatus != null" >
        group_status = #{groupStatus,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where group_batch = #{groupBatch,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.need.share.dao.jdbc.api.goodsGroup.po.GoodsGroupBase" >
    update goods_group_base
    set rule_type = #{ruleType,jdbcType=VARCHAR},
      rule_content = #{ruleContent,jdbcType=VARCHAR},
      group_name = #{groupName,jdbcType=VARCHAR},
      group_brief = #{groupBrief,jdbcType=VARCHAR},
      group_status = #{groupStatus,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where group_batch = #{groupBatch,jdbcType=VARCHAR}
  </update>
  
  <update id="updateStatus" >
     update goods_group_base 
      set 
        group_status=#{groupStatus}
         where group_batch = #{groupBatch} 
    
    </update>
    
    <select id="getByBatch" parameterType="java.lang.String" resultMap="BaseResultMap">
     select 
    <include refid="Base_Column_List" />
     from goods_group_base
      where group_batch=#{groupBatch}
       and group_status ='VALID'
       and now() between start_time and end_time
    </select>
</mapper>